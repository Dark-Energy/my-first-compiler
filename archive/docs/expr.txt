	Распределение регистров в выражениях.
	Особенности системы команд x86.
	Допускается, чтобы операнды находились в регистрах, памяти 
или были непосредственным значением. Использование двух операндов из
памяти не допускается. Один из них должен быть загружен в регистр.
	Команды сложения и вычитания.	
	Имеются следущюие виды команд:

	Сложение константы и регистра EAX, с результатом в ЕАХ
	Прибавление константы к значению в регистре/памяти
	Прибавление регистра к значению в регистре/памяти
	Прибавление значения из регистра/памяти к регистру
	

	Умножжение:
	Пара регистров EDX:EAX получает результат умножения EAX на 
значение в регистре/памяти
	Регистр умножается на значение в регистре/памяти
	Регистр получает результат умножения регистра/памяти на константу
	Регистр умножается на константу (сокращенная форма последней 
команды)

	Деление со знаком
	Делимое в регистрах EDX:EAX делится на регистр/память


	На входе у нас есть дерево выражений. Разбор дерева и генерацию
кода можно делать рекурсивной функцией expr. Результат предыдущего 
выражения всегда будет в регистре EAX.	
	Для сложения. 
	1)Если правый узел - лист (константа,переменная), то компилить
левое поддерево и  выполнить сложение.
	2)Если левый узел - лист, то компилить правый узел и выполнить 
сложение. 
	Сложение коммутативно, так что разницы нет.
	3)Если оба узла - сложные выражения, скомпилить сперва правый узел.
Поместить его результат (ЕАХ) на стек. Скомпилить левый узел. Выполкнуть
из стека значение в регистр EDX. Выполнить операцию.
	Для вычитания исключается второй вариант.
	



procedure expr(e:PNode);
begin 
  with e^ do case ntype of   
    ntAdd: begin //сложение
	
    end;
  end;	
end;



	Конечно, в такой схеме не используются все доступные регистры.
Это приводит к частым операциям со стеком, когда их можно избежать.

	Функция expr должна возвращать номер регистра, в котором 
находится результат. При каждой загрузке значения в регистр будет 
выделяться новый свободный регистр.


	
	
	 
	
	