        Компилятор состоит из лексического анализатора (сканера),
синтаксического анализатора (парсера), построителя ситаксического дерева,
таблицы символов и кодогенератора.
        Лексический анализатор очень прост. Он пропускает все пробелы
и комментарии, встречающиеся в тексте программы и останавливается на 
первом непробельном символе. Лексема распознается по ее первому символу.
        Синтаксический анализ построен на рекурсивном спуске. Можно 
выделить три группы функций, распознающих описания, операторы и выражения.
Синтаксический анализатор работает с лексемами, выдаваемыми сканером и 
строит промежуточное представление программы в  виде дерева. 
        За построение дерева и хранение его узлов отвечает третий компонент
компилятора.
        Таблица символов используется для хранения информации об 
идентификаторах в программе. Таблица символов простроена в виде двоичного
дерева.
        Наконец, кодогенератор получает программу в виде дерева и 
генерит по ней объектный код. 

        Промежуточное представление программы.
        Программа представляется в форме дерева. Каждый узел дерева 
имеет ссылки на левое и правое поддеревья и еще одну ссылку Link. 
Конечные узлы дерева соотвествуют терминалам, а внутренние - нетерминалам.

        Бинарный операции представляются как узел, левое и правое 
поддеревья которого содержат подвыражения. 
        Унарные операции - это узел с одним левым поддеревом, 
содержащим операнд.
        Последовательности операторов связываются по полю link в 
линейный список. 
        Оператор IF представляется так. Корневой узел в правом поддереве
хранит опциональную часть ELSE. В левом поддереве находится еще один
узел - левая часть - выражение, правая - операторы части THEN, link - 
возможная последовательность операторов ELSIF.
        Операторы WHILE, REPEAT : левое поддерево - выражение, правое  -
список операторов.
        Оператор присваивания: левая часть - возможное выражение (типа
индекса в массиве), правая - присваиваемое значение.
        Вызов функции: поле sym - символ, обозначающий функцию, 
левое поддерево - линйный список аргументов.

        Хранением, созданием и уничтожением узлов дерева занимается 
PTree. Также он занимается проверкой типов и оптимизацией выражений.

        ОПТИМИЗАЦИЯ.
        Все выражения с константами вычисляются во время компиляции,
включая арифметические выражения, сравннения и логические выражения.
Логические выражения также оптимизируются. 
        Поскольку логические выраженя вычисляются по короткой схеме,
то значение всего выражения может определять значение его первого
подвыражения.

        Если левый операнд в операции И = FALSE, такая операция всегда
дает FALSE.
        Если левый операнд в операции ИЛИ = TRUE, то такая операция всегда
дает TRUE. 
        При этом правая часть выражения никогда не выполняется. 
Поэтому обе эти операции заменяются константами.

        Если левый операнд И истинен, то значение выражения определяется
правым операндом. 
        Если левый операнд операции ИЛИ ложен, то значение операции 
равно ее правому операнду. 
        В этих двух случаях, логическая операция удаляется и заменяется 
на свое ПРАВОЕ подвыражение.
        
        Если правое подвыражение в операции И всегда истинно, то значение
операции определяется левым подвыражением.
        Если правый операнд операции ИЛИ всегда ложен, то значение
выражения всегда определяется левым подвыражением.
        В этом случае логическая операция заменяется своим ЛЕВЫМ 
подвыражением.

