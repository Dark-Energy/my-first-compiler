unit pe;
interface
uses SysUtils, Windows;
procedure GenFile(name: string);

var
  Buffer: array[0..4096] of char;

implementation

{$i mz.inc}

type
  //новый заголовок PE 
  SectAddr = record
    //0-экспорт (proba:$10000,$CA)
    //1-импорт  (proba:$F000,$4C4)
     virtualAddress: integer;
     vsize: integer;
   end;

  TPEHeader = record
    Signature: array[0..3] of char;
    CPUType: word;
    SectionCount: word;
    TimeDateStamp: integer;
    CoffTablePtr: integer;
    CoffTableSize: integer;
    SizeOptionalHeader: word;
    flags: word; //флаги 
    (*
        0 - это программа
        1 - файл не содержит перемещений и таблицы перемещаемых элементов
        2 - образ в файле можно запускать
        200H - грузить фиксированно
        2000h - библиотека
    *)
    magic: word; //010B
    linkerVersion: word; //версия линкера : 1902
    CodeSize: integer;  //размер кода: округлено вверх до 1000
    InitDataSize: integer; // размер инициированных данных (вверх)
    UnInitDataSize: integer; // размер неинициированных данных: 0
    EntryPoint: integer; //1000 + смещение точки входа
    BaseOfCode: integer; //1000 (RVA секции .text)
    BaseOfData: integer; //1000H (RVA секции .data)
    imageBase: integer; //$400000  виртуальный начальный адрес загрузки
     sectionAlign : integer; //$1000
    fileAlign: integer; //$200
    osVersion: integer; //1 версия ОСи
    imageVersion: integer; //0
    subsystVersion: integer; //$000A0003 версия подсистемы
    reserved1: integer; //0 не исп.
    sizeofImage: integer; //RVA последней секции+ее размер-RVA первой секции
    sizeofHeaders: integer; //размер заголовка и таблицы секций (в proba - $400)
    checkSum: integer; //0 контрольная сумма (на фиг)
    subSystem: word;    //3 - консаоль, 2- ГУИ; подсистема
    dllFlags: word;    //0
    stackReserve: integer; //$100000 макс размер стека
    stackCommit: integer; //$2000 мин размер стека
    heapReserve: integer; //$100000 макс размер кучи
    heapCommit: integer; //$1000 мин размер кучи
    loaderFlags: integer; //0 
    numRvaAndSizes:integer; //16
    dirs : array [0..15] of SectAddr
  end;

var
  PEHeader : TPEHeader;

(* таблица секций *)
type
  TSectionType = (exeNULL, exeDos, exeHeader, exeSect, exeData,
    exeIData, exeEData, exeText, exeRsrc, exeDebug);

  TSection = record
    name:array[0..7]of char; //имя секции
    //размер секции в памяти (точное значение)
    virtualSize:integer;
    //RVA секции ($1000 для .text и т.д.)
    SectionRVA: integer;
   //физический размер секции в секции (выравнено на $200)
    PhysicalSize:integer; 
   //физическое смещение от начала файла 
    PhysicalOffset: integer; 
    pointerReloc:integer; //0
    pointerLineNum:integer; //0
    numReloc:word; //0
    numLineNum:word; //0
    flags:integer; //данные
        //.text :$60000020
        //.data :$C0000040
        //.idata:$40000040
        //.edata:$40000040
        //.rsrc :$40000040
        //.debug :$40000040
  end;

var
  Sections: array [1..4] of TSection;
  MakeDLL: boolean = false;
  CodeSize:integer =  11;
  BASECODE: integer = $400000;
  STACKMAX : integer = $100000;
  STACKMIN : integer = $2000;
  HEAPMAX : integer =  $100000;
  HEAPMIN : integer = $1000;
  SizeOfImportData: integer=0; 
  Code : array[0..256] of byte;
  Data: string = 'Это тест';
  DataSize: integer = 9; 
  //Data: string = 'new';
  //DataSize: integer = 3;

type
  ImportDescriptor = record
    origFirstThunk:integer; //0
    timeDateStump:integer; //0
    forwardChain:integer; //0
    name:integer; //RVA сроки-имени файла DLL
    FirstThunk:integer; //RVA массива указателей на имп.функции
  end;
  //массив Thunk состоит из RVA указателей (zeroend)
  //каждый указывает на 0,0,имя функции zeroend
  //элементы из массива Thunk (их RVA-адреса
  //должны фигурировать в вызовах CALL PTR[]
  

function genAlign(siz, align:integer):integer;
begin
  if align=0 then result:= siz
  else if siz mod align = 0 then result:= siz
  else result:= siz - siz mod align + align
end;

procedure WriteAlign(Handle, align:integer);
const
  b:byte = 0;
var
  hw: word;
begin
  while (align <> 0) and
  (Windows.GetFileSize(Handle, @hw) mod align <> 0) do
    FileWrite(Handle, b, 1);
end;


procedure InitPEHeader;
var
  i:integer;
begin
  i:= CodeSize;
  with PEHeader do begin
    //сигнатура
    Signature[0]:= 'P'; Signature[1]:= 'E'; Signature[2]:= #0; Signature[3]:= #0;
    CPUType:= $14C;     //тип ЦПУ
    SectionCount:= 3; // колво секций
    TimeDateStamp:= $073924CA; //дата и время
    CoffTablePtr:= 0; CoffTableSize:= 0;
    SizeOptionalHeader:= $E0;
    flags:= $10E or $02;

    magic:= $010B;
    linkerVersion:= 3;
    UnInitDataSize:= 0; // размер неинициализированных данных
    InitDataSize:= GenAlign(DataSize, $1000);// размер инициализированных данных
    CodeSize:= genAlign(i, $1000);// размер кода

    BaseOfCode := $1000 + GenAlign(SizeOfImportData, $1000) + InitDataSize;  

    entryPoint := BaseOfCode; //точка входа
    baseOfData:=  $1000; // секция данных
    BASECODE:= $400000;
    imageBase:= BASECODE; //базовый виртуальный адрес 

    SectionAlign:= $1000; //выравнивание в памяти
    FileAlign:= $200; //выравнивание в файле
    OsVersion:= 4; ImageVersion:= 0; reserved1:= 0;

    sizeOfImage := $1000 + GenAlign(SizeOfImportData, $100) + 
      CodeSize + InitDataSize; //размер образа
    sizeofHeaders:= genAlign(sizeof(DOSHeader) + sizeof(TPEHeader) +
      sizeof(TSection)*3, $200); //размер всех заголовков

    checkSum:= 0; //контрольная сумма
    subSystem:= 2; //GUI номер подсистемы : консоль, ГУИ и пр.
    dllFlags:= 0; //не исп.
    //размер стека
    stackReserve:= STACKMAX;
    stackCommit:= STACKMIN;
     //размер кучи
    heapReserve:= HEAPMAX;  heapCommit:= HEAPMIN;
    loaderFlags:=0;
    //массив чего-то
    numRvaAndSizes:=16;
    for i:=0 to 15 do
      with dirs[i] do
        if i = 1 then begin  //импорт
          virtualAddress:= InitDataSize+BaseOfData;
          vsize:= GenAlign(SizeOfImportData, $1000);
        end
        else begin virtualAddress:=0;  vsize:=0; end;
  end;
end;


const
  DLLName :string = 'kernel32.dll';
  FuncName :string = 'ExitProcess';
  Kernel = 'kernel32.dll'; 
  user :string = 'ttt.dll';
  MBoxName :string=  'ShowMessage';

procedure GenExeFile(Handle: THandle);
var
  s: string;
  b: byte;
  imp1, imp2: ImportDescriptor;
  i:integer;
  funcRVA: longint;
  k:integer; 
  CurAddr: longint;
  mboxRVA: integer;
begin

  //CodeSize:= CodeSize + 35+17;
   CodeSize := 10+12;

  SizeOfImportData := 
    Length(kernel)+Length(user)+2+
    length(MBoxName)+length(FuncName)+6+16 + sizeof(ImportDescriptor)*3;


  CurAddr:=0;
  writeln('DOS Header : ', CurAddr);
  //старый и новый заголовки
  InitPEHeader; //заголовок PE
  FileWrite(Handle, DOSHeader, sizeof(DOSHeader));
  inc(CurAddr, sizeof(DOSheader));  
  writeln('PE header : ', CurAddr);
  FileWrite(Handle, PEHeader, sizeof(PEHeader));
  inc(CurAddr, sizeof(PEHeader)); 


//таблица секций
  writeln('Section Table : ', CurAddr);
  with Sections[1] do begin
   ZeroMemory(@name[0], 8); lstrcpy(@name[0], '.data'); 
   SectionRVA:= $1000;
   VirtualSize:= GenAlign(DataSize, $1000);
   PhysicalOffset := genAlign(sizeof(DOSHeader)+
      Sizeof(PEHeader)+sizeof(Sections), $200);
   PhysicalSize := GenAlign(DataSize, $200);
    flags:= $C0000040;
  end;
  inc(CurAddr, sizeof(TSection));
  with Sections[2] do begin//импорт
    lstrcpy(@name[0],'.idata'); name[7]:=char(0);
    SectionRVA:= Sections[1].SectionRVA + Sections[1].VirtualSize;//смещение в памяти
    VirtualSize:= GenAlign(SizeOfImportData, $1000); //размер в памяти
    PhysicalOffset:= Sections[1].PhysicalOffset + Sections[1].PhysicalSize;
    PhysicalSize:= GenAlign(SizeOfImportData, $200);
    flags:= $40000040;
  end;
  inc(CurAddr, sizeof(TSection));
  with Sections[3] do begin //код
    lstrcpy(@name[0],'.text'); name[6]:=char(0); name[7]:=char(0);
    SectionRVA := Sections[2].SectionRVA + Sections[2].VirtualSize;
    VirtualSize:= GenAlign(CodeSize, $1000);
    PhysicalOffset:= Sections[2].PhysicalOffset+Sections[2].PhysicalSize;
    PhysicalSize:= GenAlign(CodeSize, $200);
    flags:= $60000020;
   end;
   ZeroMemory(@Sections[4], sizeof(TSection));
   FileWrite(Handle, Sections[1], sizeof(Sections));
   WriteAlign(Handle, $200);
   inc(CurAddr, sizeof(SEctions));

   CurAddr:= GenAlign(CurAddr, $200);  
   writeln('Data Section : ', CurAddr, ' Physical Offset : ', Sections[1].PhysicalOffset); 
 
   FileWrite(Handle, Data[1], length(Data)+1);
   WriteAlign(Handle, $200);

//секция импорта (массив ImportDesctriptor)  
   inc(CurAddr, GenAlign(DataSize, $200));
   writeln('Import Section : ', CurAddr);
   k:= Sections[2].SectionRVA + sizeof(ImportDescriptor)*3;
   with imp1 do begin
     origFirstThunk:=0;
     timeDateStump:=0;
     forwardChain:=0;
     name:= k;
     FirstThunk:= k+length(kernel)+length(user)+2;
     FileWrite(Handle, imp1, sizeof(ImportDescriptor));

     name:= k + length(kernel)+1;
     FirstThunk:= k+length(kernel) + length(user)+2+8+length(funcname)+3;
     FileWrite(Handle, imp1, sizeof(ImportDescriptor));
   end;

    ZeroMemory(@imp2, sizeof(ImportDescriptor));
    FileWrite(Handle, imp2, sizeof(ImportDescriptor));

//секция импорта (массив имен модулей)
    FileWrite(Handle, DLLName[1], Length(DLLName)+1);
    b:=0; //FileWrite(handle, b, 1);
    FileWrite(Handle, user[1], length(user)+1);
    //b:=0; FileWrite(handle, b, 1);

    inc(k, length(kernel)+length(user)+2);

    //секция импорта (наборы имен функций)
    //массив указателей
    //смещение секции + размер 2 дескрипторов + длина имени DLL +1
    funcRVA:= k;
    i:= k + 8; FileWrite(handle, i, 4);
    i:= 0; FileWrite(handle, i, 4);
    FileWrite(handle, i, 2); 
    FileWrite(handle, FuncName[1], length(FuncName));
    FileWrite(handle, b, 1);

    i:= k + 8 + length(FuncName)+3;  MBOXRVA:= i;
    i:= i + 8; FileWrite(handle, i, 4);
    i:= 0; FileWrite(handle, i, 4);
    FileWrite(Handle, i, 2);
    FileWrite(Handle, MBoxName[1], length(MBoxName)+1);
   
    WriteAlign(Handle, $200);
    writeln(SizeOfImportData);
    writeln(sizeof(ImportDescriptor)*3 + length(user)+1+length(kernel)+1+
    length(Funcname)+3+length(mboxName)+3+8+8);

//секция кода
        inc(CurAddr, GenAlign(SizeOfImportData, $200));
  writeln('Code Section : ', CurAddr, ' | Physical Offset :', Sections[3].PhysicalOffset);

          k:= 0;

{          code[k]:= $68; inc(k);
          Code[k]:= 0;inc(k);
          Code[k]:= 0;inc(k);
          Code[k]:= 0;inc(k);
          Code[k]:= 0;inc(k);

          code[k]:= $68; inc(k);
          i:= File_Attribute_normal;
          code[k]:=lobyte(loword(i)); inc(k);
          code[k]:=hibyte(loword(i)); inc(k);
          code[k]:=lobyte(hiword(i)); inc(k);
          code[k]:=hibyte(hiword(i)); inc(k);

          code[k]:= $68; inc(k);
          i:= Create_Always;
          code[k]:=lobyte(loword(i)); inc(k);
          code[k]:=hibyte(loword(i)); inc(k);
          code[k]:=lobyte(hiword(i));  inc(k);
          code[k]:=hibyte(hiword(i)); inc(k);

          code[k]:= $68; inc(k);
          Code[k]:= 0;inc(k);
          Code[k]:= 0;inc(k);
          Code[k]:= 0;inc(k);
          Code[k]:= 0;inc(k);

          code[k]:= $68; inc(k);
          Code[k]:= 0;inc(k);
          Code[k]:= 0;inc(k);
          Code[k]:= 0;inc(k);
          Code[k]:= 0;inc(k);

          code[k]:= $68; inc(k); //флаги
          i:= Generic_READ or Generic_Write;
          code[k]:=lobyte(loword(i)); inc(k);
          code[k]:=hibyte(loword(i)); inc(k);
          code[k]:=lobyte(hiword(i));  inc(k);
          code[k]:=hibyte(hiword(i)); inc(k); }


          i:= PEHeader.ImageBase + Sections[1].SectionRVA; //имя файла
          code[k]:= $68; inc(k);
          code[k]:=lobyte(loword(i)); inc(k);
          code[k]:=hibyte(loword(i)); inc(k);
          code[k]:=lobyte(hiword(i));  inc(k);
          code[k]:=hibyte(hiword(i)); inc(k);

          //вызов функции
          code[k]:= $FF; inc(k);
          code[k]:= $15; inc(k);          
          MboxRVA:= BASECODe + MBoxRVA;
          code[k]:=lobyte(loword(mboxrva)); inc(k);
          code[k]:=hibyte(loword(mboxrva)); inc(k);
          code[k]:=lobyte(hiword(mboxrva)); inc(k);
          code[k]:=hibyte(hiword(mboxrva)); inc(k);


          code[k]:= $FF; inc(k);
          code[k]:= $15; inc(k);

        FuncRva:= BASECODE + funcRVA;   
          code[k]:=lobyte(loword(funcrva)); inc(k);
          code[k]:=hibyte(loword(funcrva)); inc(k);
          code[k]:=lobyte(hiword(funcrva));  inc(k);
          code[k]:=hibyte(hiword(funcrva)); inc(k);
          FileWrite(Handle, Code[0], k);
  WriteAlign(Handle, $200);

//статистика

{  for i:= 1 to 3 do 
    with Sections[i] do begin 
      write('Section ');
      case i of 
        1: write('Data ');
        2: write('Import ');
        3: write('Code');
      end;
      //writeln(' --------- ');
      writeln('_');
      writeln('Section RVA : ', SectionRVA);
      writeln('Virtual Size : ', VirtualSize);
      writeln('---------- ');
    end;  
    writeln ('****** PE ******* ');
   with PEHeader do begin                 
     writeln('Base of Data : ', BaseOfData);
     writeln('Size of Init Data : ', InitDataSize);
     writeln('Base of Code : ', BaseOfCode);
     writeln('Size of Code : ', CodeSize); 
     writeln('Entry Point : ', EntryPoint);
   end;}
end;

procedure GenFile(name: string);
var
  handle: THandle;
begin
  ZeroMemory(@Buffer[0], sizeof(Buffer));
  handle:= FileCreate(name);
  if handle = 0 then exit;
  try  
   GenExeFile(handle);
  finally
    CloseHandle(handle);
  end;
end;

end.