/* алгоритм Евклида нахождения наибольшего общего делителя 
одновременно не равных нулю целых чисел  a, b, a>=b>0. 

Пусть а и b - одновременно не равные нулю целые числа и пусть а>=b.
Тогда, если b=0, то НОД (a,b)= а, а если b<>0, то для чисел a, b и с, где
с - остаток от деления а на b, выполнено равенство 
НОД(a,b)= НОД(b,c). Например, НОД(15, 6) = НОД(6,3)= НОД(3,0)=3.
*/
  
/*
int a:=15, b:=6,c:=0;
if b= 0 then c:=a; endif;
while b>0 do 
  c:=a mod b; a:=b; b:=c;
wend;
Write(a);
*/

/* нахождение суммы 1+1/2+..1/n;*/
/*
int i, n:=7; 
real s:=0;
for i:= 1 to n do 
   s:=s+1/i;
next;
Write(s);
*/

/*
int a:= 5**10;
int b:= 5**2 * 5**2 * 5**2 * 5**2 * 5**2;
if a=b then Write(true); endif;

int c:= 5*5;  //5**2
int d:= c*c;  //5**2 * 5**2 = 5**4
Write(d);
int e:= d*d;  // 5**4 * 5**4 = 5**8
Write(e);
int f:= e*c;   //5**8 * 5**2 = 5*(8+2)=5**10
 Write(f); 
Write(a);
*/

/*
int a:=4, b:= 6;
if (a**2+b**2)/4 = a**2/4+b**2/4 then 
    Write(True) else Write(False); endif;
*/


/* дробная часть f представляется с помощью k-1 цифры в десятичном
виде, т.е. таким массивом d, что 
  f = Si: 1<=i<k: di  * 10** -i

Предположим, что мы хотим разделить d на 2. Это проделывается 
повторением знакомой операции деления всех k-1цифр  di, начиная с
i:=1. Операция включает деление каждой цифры на 2 с учетом
возможного "переноса" из предыдущей позиции и переноса 
возможного остатка r в следующую позицию. 

 r:= 10 * r + d[i];    d[i]:= r div 2;    r:= r mod 2;
*/

/*
int N:=10;
int  i, k,  r;
char vector d[N];
//for i:=0 to n-1 do  d[i]:= 0; next;

for k:= 0 to N-1 do 
Write(".");
  r:=0;
  for i:= 0 to k-1 do 
    r:= 10*r + d[i]; 
    d[i]:= r div 2;
    r:= r mod 2;
    Write(chr(d[i]+'0'));
next;
 d[k]:=5;  Writeln("5");
next;
*/
    
/*
Имеется последовательность утверждений. Если первое утверждение верно, и
за каждым верным утверждением следует верное, то все утверждения  в 
последователности верны.

Пусть нужно доказать формулу
1+2+3+ ...+n = (n*(n+1))/2.
Эта формула содержит целую последовательность утверждений:
1= 1*2/2
1+2= 2*3/2
1+2+3= 3*4/2
1+2+3+4=4*5/2
Первое утверждение, разумеется верно. Проверим, что за каждым верным 
утверждением следует верное.
  Пусть утверждение k верно, т.е. равенство 
1+2+3+...+k= k*(k+1)/2 
справедливо. Прибавим к обеим частям равенства число k+1. Получим 
1+2+3+...+k+(k+1) = ((k*(k+1))/2)+k+1 = (k+1)*(k+2)/2. 
Но это как раз и есть утверждение k+1, следующее за утверждением k.
Эту же задачу можно решить и без использования метода математической
индукции. Обозначим сумму, которую мы хотим найти, через  Un. Напишем два
равенства 
Un = 1+2+3+..+(n-2)+(n-1)+n,
Un = n+(n-1)+(n-2)+...3+2+1.
Мы получим 
  2Un = [1+n]+[2+(n-1)]+[3+(n-2)]+...+[(n-2)+3]+[(n-1)+2]+[n+1].
В каждой квадратной скобке стоит число n+1, а всего таких скобок n.
Поэтому 2Un = (n+1)+(n+1)+...+(n+1)+(n+1) = n*(n+1), 
               n раз 
Un=n*(n+1)/2.

*/

/*
int i:=1**3+2**3+3**3;
int j:= 3**2*4**2\4;
Writeln(i);
Writeln(j);
int k:=4**2*(3-1)**2\2;
*/

/* 1**3 + 2**3 + 3**3 +...+n + (n+1)**3 = 
  n**2*(n+1)**2\4 + (n+1)**3 = (n+1)**2 * (n+2)**2\4*\
/*
8:3+5:        a+b
9:3+3+3:      3a
10:5+5:       2b
11:5+3+3      2a+b
12:3+3+3+3    4a
13:5+5+3      a+2b
14:3+3+3+5    3a+b
15:5+5+5      3b
16:5+5+3+3    2a+2b  
17:5+3+3+3+3  4a+b
*/

/* любое число, большее 8 можно составить
 суммой из a5 + b3 чисел */

int i:=8;
int a:=1,b:=1;
while i < 17 do 
  if b>0 then 
    b:=b-1;
    a:=a+2;
  else if a >= 3 then 
    a:=a-3;
    b:=b+2;
  endif;
   writeln(a*3+b*5);
  i:=i+1;
wend;