* About this repository *This repository contain projects, developing my in my "childish" era. It (unworked) compiler and (worked) interpriter.When i am studied compiler theory, i want to develope compiler. Firstly, i create interpriter for my own programming language 'UNIVAC'. Then i want create true compiler. It compiler take programm, written in 'UNIVAC' (languagle, invented by me) and doing just-in time compilation and running. First it do parse throgh 'top down recursion', then build syntaxic tree, do some primititve optimisation and generate output in machine code for processor x86,eventually run this codeI was trying create compiler, generated Portable Executable files, but this work was abandoned.* FOLDERS *Archive containt all to do with compiler.Portable Executable - propably, my first expirience with generation exe-filessource - source code for jit-compilertests - examples program on UNIVACPasToEvl - i don't know what is doing* TERRIBLE REVEALATION *Finally, this programm seemed disfunctional. I am even trying compile and find error. Unfortunately, source code seemed spoiled because of copying from corrupted hard disk drive. And part of source is lost. I kwow, what is a part - is a JIT compiler. Even wrong, generation executable file is wrong and don't work on modern Windows. I also questeion, what JIT compiler could run on Windows 7 and higher. * JOYFUL NEW! *But, i found worked interpriter! It is mere interpreiter, it not compile text to syntactic tree, it parsing source code and run it on the fly. It support language with recursive function, arrays, strings and records. May be somebody append closure and make it fully analog of JavaScript!* Conclusion *Strange words, but, now i'm thininkin, what this things (compilers and interprites) easy develop on language like JavaScript. On language, where yet dictionary, i not have to about memory allocation and deallocation, not hardly structure and strongly typisation. But this is mere toys.